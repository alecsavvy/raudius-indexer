# API
# Audius V1 API
# The version of the OpenAPI document: 1.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package openapi2graphql

# users_api

type mutation {
  # Get all users that subscribe to the users listed in the JSON request
  # @param [String!] ids User IDs to fetch subscribers for
  # @return [BulkSubscribersResponse]
  BulkGetSubscribersViaJSONRequest(ids: [String!]): BulkSubscribersResponse

}

type query {
  # All users that subscribe to the provided users
  # @param [String!] ids User IDs to fetch subscribers for
  # @return [BulkSubscribersResponse]
  BulkGetSubscribers(ids: [String!]): BulkSubscribersResponse

  # Get the User&#39;s ERC and SPL connected wallets
  # @param String! Id_ A User ID
  # @return [ConnectedWalletsResponse]
  GetConnectedWallets(Id_: String!): ConnectedWalletsResponse

  # Gets a user&#39;s favorite albums
  # @param String! Id_ A User ID
  # @return [FavoritesResponse]
  GetFavoriteAlbums(Id_: String!): FavoritesResponse

  # Gets a user&#39;s favorite playlists
  # @param String! Id_ A User ID
  # @return [FavoritesResponse]
  GetFavoritePlaylists(Id_: String!): FavoritesResponse

  # Gets a user&#39;s favorite tracks
  # @param String! Id_ A User ID
  # @return [FavoritesResponse]
  GetFavorites(Id_: String!): FavoritesResponse

  # All users that follow the provided user
  # @param String! Id_ A User ID
  # @param Int! offset The number of items to skip. Useful for pagination (page number * limit)
  # @param Int! limit The number of items to fetch
  # @param String! userId The user ID of the user making the request
  # @return [FollowersResponse]
  GetFollowers(Id_: String!, offset: Int!, limit: Int!, userId: String!): FollowersResponse

  # All users that the provided user follows
  # @param String! Id_ A User ID
  # @param Int! offset The number of items to skip. Useful for pagination (page number * limit)
  # @param Int! limit The number of items to fetch
  # @param String! userId The user ID of the user making the request
  # @return [FollowingResponse]
  GetFollowings(Id_: String!, offset: Int!, limit: Int!, userId: String!): FollowingResponse

  # Gets a list of users that might be of interest to followers of this user.
  # @param String! Id_ A User ID
  # @param Int! limit The number of items to fetch
  # @param String! userId The user ID of the user making the request
  # @return [RelatedArtistResponse]
  GetRelatedUsers(Id_: String!, limit: Int!, userId: String!): RelatedArtistResponse

  # Gets the given user&#39;s reposts
  # @param String! Id_ A User ID
  # @param Int! offset The number of items to skip. Useful for pagination (page number * limit)
  # @param Int! limit The number of items to fetch
  # @param String! userId The user ID of the user making the request
  # @return [Reposts]
  GetReposts(Id_: String!, offset: Int!, limit: Int!, userId: String!): Reposts

  # Gets the user&#39;s reposts by the user handle
  # @param String! handle A User handle
  # @param Int! offset The number of items to skip. Useful for pagination (page number * limit)
  # @param Int! limit The number of items to fetch
  # @param String! userId The user ID of the user making the request
  # @return [Reposts]
  GetRepostsByHandle(handle: String!, offset: Int!, limit: Int!, userId: String!): Reposts

  # All users that subscribe to the provided user
  # @param String! Id_ A User ID
  # @param Int! offset The number of items to skip. Useful for pagination (page number * limit)
  # @param Int! limit The number of items to fetch
  # @param String! userId The user ID of the user making the request
  # @return [SubscribersResponse]
  GetSubscribers(Id_: String!, offset: Int!, limit: Int!, userId: String!): SubscribersResponse

  # Gets the specified supporter of the given user
  # @param String! Id_ A User ID
  # @param String! supporterUserId A User ID of a supporter
  # @param String! userId The user ID of the user making the request
  # @return [GetSupporter]
  GetSupporter(Id_: String!, supporterUserId: String!, userId: String!): GetSupporter

  # Gets the supporters of the given user
  # @param String! Id_ A User ID
  # @param Int! offset The number of items to skip. Useful for pagination (page number * limit)
  # @param Int! limit The number of items to fetch
  # @return [GetSupporters]
  GetSupporters(Id_: String!, offset: Int!, limit: Int!): GetSupporters

  # Gets the support from the given user to the supported user
  # @param String! Id_ A User ID
  # @param String! supportedUserId A User ID of a supported user
  # @param String! userId The user ID of the user making the request
  # @return [GetSupporting]
  GetSupporting(Id_: String!, supportedUserId: String!, userId: String!): GetSupporting

  # Gets the users that the given user supports
  # @param String! Id_ A User ID
  # @param Int! offset The number of items to skip. Useful for pagination (page number * limit)
  # @param Int! limit The number of items to fetch
  # @return [GetSupporting]
  GetSupportings(Id_: String!, offset: Int!, limit: Int!): GetSupporting

  # Fetch most used tags in a user&#39;s tracks
  # Gets the most used track tags by a user.
  # @param String! Id_ A User ID
  # @param Int! limit The number of items to fetch
  # @param String! userId The user ID of the user making the request
  # @return [TagsResponse]
  GetTopTrackTags(Id_: String!, limit: Int!, userId: String!): TagsResponse

  # Get the Top Users having at least one track by follower count
  # @param Int! offset The number of items to skip. Useful for pagination (page number * limit)
  # @param Int! limit The number of items to fetch
  # @param String! userId The user ID of the user making the request
  # @return [TopUsersResponse]
  GetTopUsers(offset: Int!, limit: Int!, userId: String!): TopUsersResponse

  # Get the Top Users for a Given Genre
  # @param Int! offset The number of items to skip. Useful for pagination (page number * limit)
  # @param Int! limit The number of items to fetch
  # @param [String!] genre List of Genres
  # @return [TopGenreUsersResponse]
  GetTopUsersInGenre(offset: Int!, limit: Int!, genre: [String!]): TopGenreUsersResponse

  # Gets the tracks created by a user using their user ID
  # @param String! Id_ A User ID
  # @param Int! offset The number of items to skip. Useful for pagination (page number * limit)
  # @param Int! limit The number of items to fetch
  # @param String! userId The user ID of the user making the request
  # @param String! sort [Deprecated] Field to sort by
  # @param String! Query_ The filter query
  # @param String! sortMethod The sort method
  # @param String! sortDirection The sort direction
  # @param String! filterTracks Filter by unlisted or public tracks
  # @return [TracksResponse]
  GetTracksByUser(Id_: String!, offset: Int!, limit: Int!, userId: String!, sort: String!, Query_: String!, sortMethod: String!, sortDirection: String!, filterTracks: String!): TracksResponse

  # Gets the tracks created by a user using the user&#39;s handle
  # @param String! handle A User handle
  # @param Int! offset The number of items to skip. Useful for pagination (page number * limit)
  # @param Int! limit The number of items to fetch
  # @param String! userId The user ID of the user making the request
  # @param String! sort [Deprecated] Field to sort by
  # @param String! Query_ The filter query
  # @param String! sortMethod The sort method
  # @param String! sortDirection The sort direction
  # @param String! filterTracks Filter by unlisted or public tracks
  # @return [TracksResponse]
  GetTracksByUserHandle(handle: String!, offset: Int!, limit: Int!, userId: String!, sort: String!, Query_: String!, sortMethod: String!, sortDirection: String!, filterTracks: String!): TracksResponse

  # Gets a single user by their user ID
  # @param String! Id_ A User ID
  # @return [UserResponse]
  GetUser(Id_: String!): UserResponse

  # Gets a single user by their handle
  # @param String! handle A User handle
  # @param String! userId The user ID of the user making the request
  # @return [UserResponse]
  GetUserByHandle(handle: String!, userId: String!): UserResponse

  # Gets a User ID from an associated wallet address
  # @param String! associatedWallet Wallet address
  # @return [UserAssociatedWalletResponse]
  GetUserIDFromWallet(associatedWallet: String!): UserAssociatedWalletResponse

  # Gets the listen data for a user by month and track within a given time frame.
  # @param String! Id_ A User ID
  # @param String! startTime Start time from which to start results for user listen count data (inclusive).
  # @param String! endTime End time until which to cut off results of listen count data (not inclusive).
  # @return [UserTrackListenCountsResponse]
  GetUserMonthlyTrackListens(Id_: String!, startTime: String!, endTime: String!): UserTrackListenCountsResponse

  # Gets the user&#39;s replica set
  # @param String! Id_ A User ID
  # @return [UsersByContentNode]
  GetUserReplicaSet(Id_: String!): UsersByContentNode

  # Get the tracks the user recently listened to.
  # @param String! Id_ A User ID
  # @param Int! offset The number of items to skip. Useful for pagination (page number * limit)
  # @param Int! limit The number of items to fetch
  # @param String! userId The user ID of the user making the request
  # @param String! Query_ The filter query
  # @param String! sortMethod The sort method
  # @param String! sortDirection The sort direction
  # @return [HistoryResponse]
  GetUsersTrackHistory(Id_: String!, offset: Int!, limit: Int!, userId: String!, Query_: String!, sortMethod: String!, sortDirection: String!): HistoryResponse

  # Search for users that match the given query
  # @param String! Query_ The search query
  # @return [UserSearch]
  SearchUsers(Query_: String!): UserSearch

  # Verify if the given jwt ID token was signed by the subject (user) in the payload
  # @param String! token JWT to verify
  # @return [VerifyToken]
  VerifyIDToken(token: String!): VerifyToken

}

