/*
 * API
 *
 * Audius V1 API
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DecodedUserToken {
    #[serde(rename = "userId")]
    pub user_id: String,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "handle")]
    pub handle: String,
    #[serde(rename = "verified")]
    pub verified: bool,
    #[serde(rename = "profilePicture", skip_serializing_if = "Option::is_none")]
    pub profile_picture: Option<Box<crate::api::ProfilePicture>>,
    #[serde(rename = "sub")]
    pub sub: String,
    #[serde(rename = "iat")]
    pub iat: String,
}

impl DecodedUserToken {
    pub fn new(
        user_id: String,
        email: String,
        name: String,
        handle: String,
        verified: bool,
        sub: String,
        iat: String,
    ) -> DecodedUserToken {
        DecodedUserToken {
            user_id,
            email,
            name,
            handle,
            verified,
            profile_picture: None,
            sub,
            iat,
        }
    }
}
